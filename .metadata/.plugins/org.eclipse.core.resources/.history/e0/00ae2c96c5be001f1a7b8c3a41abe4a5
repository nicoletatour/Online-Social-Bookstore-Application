package myy803.socialbookstore;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import myy803.socialbookstore.datamodel.Book;
import myy803.socialbookstore.datamodel.BookAuthor;
import myy803.socialbookstore.datamodel.BookCategory;
import myy803.socialbookstore.datamodel.UserProfile;
import myy803.socialbookstore.formsdata.BookDto;
import myy803.socialbookstore.mappers.BookAuthorMapper;
import myy803.socialbookstore.mappers.BookCategoryMapper;
import myy803.socialbookstore.mappers.BookMapper;
import myy803.socialbookstore.mappers.UserProfileMapper;
import myy803.socialbookstore.services.BookOfferServiceImpl;
import myy803.socialbookstore.services.BookRequestServiceImpl;

@ExtendWith(SpringExtension.class)
@SpringBootTest
public class SocialBookStoreTests {

    @Mock
    private UserProfileMapper userProfileMapper;

    @Mock
    private BookMapper bookMapper;

    @Mock
    private BookCategoryMapper bookCategoryMapper;

    @Mock
    private BookAuthorMapper bookAuthorMapper;

    @InjectMocks
    private BookOfferServiceImpl bookOfferService;
    
    @InjectMocks
    private BookRequestServiceImpl bookRequestService;

    private UserProfile userProfile;
    private BookCategory bookCategory;
    private BookAuthor bookAuthor;
    private Book book;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        // Mock δεδομένα
        bookAuthor = new BookAuthor();
        bookAuthor.setName("J.K. Rowling");

        bookCategory = new BookCategory();
        bookCategory.setName("Fantasy");

        userProfile = new UserProfile();
        userProfile.setUsername("ioanna");
        userProfile.setFullName("Ioanna Ioanna");
        userProfile.setAge(22);
        
        book = new Book("Harry Potter");
        book.setOfferId(1);
        book.getRequestingUsers().add(userProfile);

        List<BookAuthor> favoriteAuthors = new ArrayList<>();
        favoriteAuthors.add(bookAuthor);
        userProfile.setFavouriteBookAuthors(favoriteAuthors);
    }

    @Test
    public void testSaveUserProfile() {
        when(userProfileMapper.findByUsername("ioanna")).thenReturn(userProfile);

        UserProfile retrievedUserProfile = userProfileMapper.findByUsername("ioanna");

        assertNotNull(retrievedUserProfile, "UserProfile should not be null");
        assertEquals("Ioanna Ioanna", retrievedUserProfile.getFullName(), "Full name should match");
        assertEquals(22, retrievedUserProfile.getAge(), "Age should match");
    }

    @Test
    public void testSaveOffer() {
        BookDto bookDto = new BookDto();
        bookDto.setTitle("Harry Potter and the Philosopher's Stone");
        bookDto.setAuthors("J.K. Rowling");
        bookDto.setCategory("Fantasy");

        List<BookCategory> categories = new ArrayList<>();
        categories.add(bookCategory);
        List<BookAuthor> authors = new ArrayList<>();
        authors.add(bookAuthor);

        when(userProfileMapper.findById("ioanna")).thenReturn(Optional.of(userProfile));
        when(bookCategoryMapper.findByName("Fantasy")).thenReturn(categories);
        when(bookAuthorMapper.findByName("J.K. Rowling")).thenReturn(authors);

        bookOfferService.saveOfferBusinessLogic("ioanna", bookDto);

        verify(userProfileMapper).save(userProfile);
    }

    @Test
    public void testDeleteBookOffer() {
        int bookId = 1;

        bookOfferService.deleteBookOfferBusinessLogic(bookId);

        verify(bookMapper).deleteById(bookId);
    }
    
    @Test
    public void testDeleteBookRequest() {
        // Mock συμπεριφορά για εύρεση του βιβλίου και του προφίλ χρήστη
        when(bookMapper.findById(1)).thenReturn(Optional.of(book));
        when(userProfileMapper.findByUsername("ioanna")).thenReturn(userProfile);

        // Εκτέλεση μεθόδου
        bookRequestService.deleteBookRequestBusinessLogic(1, "ioanna");

        // Επιβεβαίωση ότι ο χρήστης αφαιρέθηκε από τη λίστα αιτημάτων
        assertEquals(0, book.getRequestingUsers().size());
        verify(bookMapper).save(book);
    }
    
    @Test
    public void testAcceptRequest() {
        // Mock συμπεριφορά για εύρεση του βιβλίου
        when(bookMapper.findById(1)).thenReturn(Optional.of(book));

        // Εκτέλεση μεθόδου
        bookRequestService.acceptRequestBusinessLogic("ioanna", 1);

        // Επιβεβαίωση ότι τα αιτήματα έχουν εκκαθαριστεί
        assertEquals(0, book.getRequestingUsers().size());
        verify(bookMapper).save(book);
    }
    
    

    
    
}
