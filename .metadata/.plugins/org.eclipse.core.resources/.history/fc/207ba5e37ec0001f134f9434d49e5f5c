package myy803.socialbookstore.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import myy803.socialbookstore.formsdata.BookDTO;
import myy803.socialbookstore.formsdata.UserProfileDTO;
import myy803.socialbookstore.services.BookRequestService;

@Controller
@RequestMapping("/user")
public class BookRequestController {

    @Autowired
    private BookRequestService bookRequestService;

    @RequestMapping("/request_book")
    public String request(@RequestParam("selected_book_id") int bookId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();

        bookRequestService.requestBusinessLogic(username, bookId);
        return "redirect:/user/dashboard";
    }

    @RequestMapping("/requests")
    public String showUserBookRequests(Model model) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();

        List<BookDTO> requests = bookRequestService.showUserBookRequestsBusinessLogic(username);
        model.addAttribute("requests", requests);

        return "/user/book_requests";
    }

    @RequestMapping("/book_requesting_users")
    public String showRequestingUsersForBookOffer(@RequestParam("selected_offer_id") int bookId, Model model) {
        List<UserProfileDTO> requestingUsers = bookRequestService.showRequestingUsersForBookOfferBusinessLogic(bookId);
        model.addAttribute("requesting_users", requestingUsers);
        model.addAttribute("book_id", bookId);

        return "/user/requesting_users";
    }

    @RequestMapping("/accept_request")
    public String acceptRequest(@RequestParam("selected_user") String username, @RequestParam("book_id") int bookId) {
        bookRequestService.acceptRequestBusinessLogic(username, bookId);
        return "redirect:/user/dashboard";
    }


//    @RequestMapping("/delete_book_request")
//    public String deleteBookRequest(@RequestParam("selected_request_id") int bookId) {
//        bookRequestService.deleteBookRequestBusinessLogic(bookId);
//        return "redirect:/user/dashboard";
//    }
    
    @RequestMapping("/delete_book_request")
    public String deleteBookRequest(@RequestParam("selected_request_id") int bookId, Model model) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();    
        String username = authentication.getName();

        bookRequestService.deleteBookRequestBusinessLogic(bookId, username);

        return "redirect:/user/requests";
    }

}
